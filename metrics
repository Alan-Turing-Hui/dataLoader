import torch
import torchaudio
from sklearn.metrics import precision_score, recall_score, f1_score, roc_auc_score, confusion_matrix, balanced_accuracy_score

# 假设你已经训练好了模型
model = ...  # your trained model

# 测试集数据加载器 (DataLoader)
test_loader = ...  # your test DataLoader

# 定义设备
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# 将模型设置为评估模式
model.eval()

# 存储预测和真实标签
y_true = []
y_pred = []

# 不需要梯度计算
with torch.no_grad():
    for inputs, labels in test_loader:
        inputs = inputs.to(device)
        labels = labels.to(device)

        # 获取模型预测
        outputs = model(inputs)
        # 假设输出是二分类的概率值，可以通过sigmoid来处理
        predictions = torch.sigmoid(outputs)
        # 以0.5为阈值，二分类
        predicted_classes = (predictions > 0.5).long()

        # 将结果添加到列表中
        y_true.extend(labels.cpu().numpy())
        y_pred.extend(predicted_classes.cpu().numpy())

# 计算各种指标
precision = precision_score(y_true, y_pred)
recall = recall_score(y_true, y_pred)
f1 = f1_score(y_true, y_pred)
roc_auc = roc_auc_score(y_true, y_pred)
conf_matrix = confusion_matrix(y_true, y_pred)
balanced_acc = balanced_accuracy_score(y_true, y_pred)

# 输出结果
print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1 Score: {f1:.4f}')
print(f'ROC AUC: {roc_auc:.4f}')
print(f'Confusion Matrix:\n{conf_matrix}')
print(f'Balanced Accuracy: {balanced_acc:.4f}')
