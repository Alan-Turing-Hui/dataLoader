##确保所有音频片段的长度一致，方便批处理
import torch

def pad_or_trim_waveform(waveform, target_length):
    # 如果音频太长，裁剪它
    if waveform.size(1) > target_length:
        waveform = waveform[:, :target_length]
    # 如果音频太短，填充它
    elif waveform.size(1) < target_length:
        pad_amount = target_length - waveform.size(1)
        waveform = torch.nn.functional.pad(waveform, (0, pad_amount))
    return waveform

##直接将原始音频信号输入神经网络效果通常不好，因此需要提取特征
import torchaudio.transforms as T

# 创建Mel频谱图转换器
transform = T.MelSpectrogram(sample_rate=sample_rate, n_mels=64)

# 将音频转换为Mel频谱图
mel_spectrogram = transform(waveform)

##创建一个数据加载器，它能够批量加载数据并进行处理
from torch.utils.data import Dataset, DataLoader
import os

class AudioDataset(Dataset):
    def __init__(self, file_list, transform=None, target_length=16000):
        self.file_list = file_list
        self.transform = transform
        self.target_length = target_length
    
    def __len__(self):
        return len(self.file_list)
    
    def __getitem__(self, idx):
        file_path = self.file_list[idx]
        waveform, sample_rate = torchaudio.load(file_path)
        waveform = pad_or_trim_waveform(waveform, self.target_length)
        
        if self.transform:
            waveform = self.transform(waveform)
        
        return waveform

# 创建数据集和数据加载器
file_list = [os.path.join("path_to_folder", f) for f in os.listdir("path_to_folder") if f.endswith('.wav')]
dataset = AudioDataset(file_list, transform=T.MelSpectrogram())
data_loader = DataLoader(dataset, batch_size=32, shuffle=True)
